//Client file generated by RPC Compiler.
import { Injectable } from '@angular/core';
import { Http, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import { Observer } from 'rxjs/Observer';
import { Deserialize, Converter } from 'Serializable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import {Dog} from "../app/dog";

import {rpcService, rpcMember} from 'Serializable';
@Injectable()
export class Demo {
	constructor(private $_Angular2HttpClient: Http){
	}
	public Dogs(): Observable< Dog[]>{
		return Observable.create((observer: Observer< Dog[]>) => {
			this.$_Angular2HttpClient.post('/rpc/demo.rpc.js?Demo-Dogs', []).map(Converter.convertStringResponse).subscribe(stringValue => {
				console.log("stringValue: ", stringValue);
				if(stringValue){
					let jsonObject = JSON.parse(stringValue);
					Deserialize(jsonObject, (deserialized) => {
						observer.next(deserialized);
						observer.complete();
					});
				}
				else{
					observer.next(null);
					observer.complete();
				}
			});
		});
	}
	public test(jack: string, sam:  number, jason:  Dog): Observable< string>{
		return this.$_Angular2HttpClient.post('/rpc/demo.rpc.js?Demo-test', [jack, sam, jason]).map(Converter.convertStringResponse);
	}
	public tom(): Observable< Dog>{
		return Observable.create((observer: Observer< Dog>) => {
			this.$_Angular2HttpClient.post('/rpc/demo.rpc.js?Demo-tom', []).map(Converter.convertStringResponse).subscribe(stringValue => {
				console.log("stringValue: ", stringValue);
				if(stringValue){
					let jsonObject = JSON.parse(stringValue);
					Deserialize(jsonObject, (deserialized) => {
						observer.next(deserialized);
						observer.complete();
					});
				}
				else{
					observer.next(null);
					observer.complete();
				}
			});
		});
	}
	public jerry(): Observable< boolean>{
		return this.$_Angular2HttpClient.post('/rpc/demo.rpc.js?Demo-jerry', []).map(Converter.convertBooleanResponse);
	}
}
