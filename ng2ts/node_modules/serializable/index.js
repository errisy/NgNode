//console.log('loading Serializable...');
//how to write this code?
//for server 'serializable' is an internal module, it will be loaded at the time of running.
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//should work for both nodeJS and browser
var __relativeRoot;
var DynamicRequire;
var Path;
(function (Path) {
    function Reduce(path) {
        return path.replace(/[^\\^\/^\:]+[\\\/]+\.\.[\\\/]+/ig, '').replace(/([^\:])[\\\/]{2,}/ig, function (capture) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return args[0] + '\/';
        }).replace(/\.[\\\/]+/ig, '');
    }
    Path.Reduce = Reduce;
    function getFilename(path) {
        var index = Math.max(path.lastIndexOf('\\'), path.lastIndexOf('\/'));
        if (index > -1)
            return path.substr(index + 1);
        return path;
    }
    Path.getFilename = getFilename;
    function getPathname(path) {
        var index = Math.max(path.lastIndexOf('\\'), path.lastIndexOf('\/'));
        //console.log('[pathreducer]->pathaname: ', path, index, path.length);
        if (index > -1)
            return path.substr(0, index + 1);
        return path;
    }
    Path.getPathname = getPathname;
    function toPathname(path) {
        var index = Math.max(path.lastIndexOf('\\'), path.lastIndexOf('\/'));
        //console.log('[pathreducer]->pathaname: ', path, index, path.length);
        if (index > -1)
            return path.substr(0, index + 1);
        return path;
    }
    Path.toPathname = toPathname;
})(Path = exports.Path || (exports.Path = {}));
var AsyncRequireStringLoader = (function () {
    function AsyncRequireStringLoader(requiring) {
        var _this = this;
        this.requiring = requiring;
        this.keys = [];
        this.require = function (key, filename, pathname) {
            _this.keys.push(key);
            DynamicRequire(filename, pathname, _this.loaded(key));
        };
        this.loaded = function (key) {
            var that = _this;
            return function (exported) {
                that.requiring[key] = exported;
                that.keys.splice(_this.keys.indexOf(key), 1);
                if (that.keys.length == 0 && that.allRequired) {
                    that.onLoadCompleted(that.requiring);
                }
            };
        };
        this.completeRequire = function () {
            _this.allRequired = true;
            var that = _this;
            if (_this.keys.length == 0 && _this.allRequired) {
                that.onLoadCompleted(_this.requiring);
            }
        };
        this.allRequired = false;
    }
    return AsyncRequireStringLoader;
}());
var AsyncRequireNumberLoader = (function () {
    function AsyncRequireNumberLoader(requiring) {
        var _this = this;
        this.requiring = requiring;
        this.keys = [];
        this.require = function (key, filename, pathname) {
            _this.keys.push(key);
            DynamicRequire(filename, pathname, _this.loaded(key));
            console.log('Aysnc: ', pathname, filename);
        };
        this.loaded = function (key) {
            var that = _this;
            return function (exported) {
                that.requiring[key] = exported;
                that.keys.splice(_this.keys.indexOf(key), 1);
                if (that.keys.length == 0 && that.allRequired) {
                    that.onLoadCompleted(that.requiring);
                }
            };
        };
        this.completeRequire = function () {
            _this.allRequired = true;
            if (_this.keys.length == 0 && _this.allRequired) {
                _this.onLoadCompleted(_this.requiring);
            }
        };
        this.allRequired = false;
    }
    return AsyncRequireNumberLoader;
}());
if (!console['Console']) {
    //Client Browser: window.document is defined
    __relativeRoot = '';
    var fs_1 = (function () {
        function fs_1() {
        }
        fs_1.readFile = function (filename, callback) {
            var xmlRequest = new XMLHttpRequest();
            xmlRequest.overrideMimeType("text/plain");
            xmlRequest.onreadystatechange = function (ev) {
                if (xmlRequest.readyState == 4) {
                    if (xmlRequest.status == 200) {
                        console.log('fs.readFile callback');
                        callback(xmlRequest.responseText);
                    }
                    else {
                    }
                }
            };
            xmlRequest.onerror = function (ev) {
                console.log('XMLHttpRequest Error', ev);
            };
            xmlRequest.open('GET', filename, true);
            xmlRequest.send(null);
            console.log('fs.readFile sent: ', filename);
        };
        return fs_1;
    }());
    /**
     * Implementation of Node vm at client side;
     */
    var vm_1 = (function () {
        function vm_1() {
        }
        vm_1.createContext = function (contextObj) {
            return new VMContext_1(contextObj);
        };
        vm_1.createScript = function (code) {
            return new VMScript_1(code);
        };
        return vm_1;
    }());
    var VMContext_1 = (function () {
        function VMContext_1(contextObj) {
            this.contextObj = contextObj;
        }
        Object.defineProperty(VMContext_1.prototype, "Context", {
            get: function () {
                return this.contextObj;
            },
            enumerable: true,
            configurable: true
        });
        return VMContext_1;
    }());
    var VMScript_1 = (function () {
        function VMScript_1(code) {
            var _this = this;
            this.code = code;
            this.runInContext = function (context) {
                var contextCode = [];
                for (var key in context.Context) {
                    contextCode.push('\t\tlet ' + key + ' = $__injectedContext["' + key + '"];\n');
                }
                var script = '({\n' +
                    '\tmethod: function($__injectedContext){\n' +
                    contextCode.join('') +
                    '\t\treturn function(){\n\t\t\ttry{\n\t\t\t\tvar exports = {};\n' +
                    _this.code +
                    '\n\t\t\t\treturn exports;\n\t\t}\n' +
                    '\t\t\tcatch(ex){\n\t\t\tconsole.log("Dynamic Require Error:", ex);\n\t\t\t}\n' +
                    '\t\t}\n' +
                    '\t}\n' +
                    '})';
                //console.log(script);
                return eval(script).method(context.Context);
            };
        }
        return VMScript_1;
    }());
    DynamicRequire = function (fileName, directoryName, callback) {
        try {
            if (!directoryName)
                directoryName = __relativeRoot;
            console.log('DynamicRequire: ', fileName, ' Base Path: ' + directoryName);
            var required = {};
            var requiredIndex_1 = 0;
            var fullFilename_1 = Path.Reduce(directoryName + '//' + fileName);
            var dependencyLoader_1 = new AsyncRequireNumberLoader(required);
            fs_1.readFile(fullFilename_1, function (data) {
                //console.log('readFile data: ', data);
                if (!data)
                    throw 'Script file ' + fullFilename_1 + ' can not be loaded by Dynamic Require.';
                var code = data.replace(/require\s*\(\s*[\'"]([\/a-z_\-\s0-9\.]+)[\'"]\s*\)/ig, function (capture) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    console.log('hit: ', capture);
                    var $modulePath = args[0];
                    var $file;
                    if ($modulePath.charAt[0] == '.') {
                        $file = Path.Reduce(directoryName + '//' + args[0] + '.js');
                    }
                    else {
                        $file = Path.Reduce(directoryName + '/node_modules/' + args[0] + '/index.js');
                    }
                    dependencyLoader_1.require(requiredIndex_1, Path.getFilename($file), Path.toPathname($file));
                    var replacement = '$__required[' + requiredIndex_1 + ']';
                    requiredIndex_1 += 1;
                    return replacement;
                }).replace(/require\s*\(\s*[\'"]Serializable[\'"]\s*\)/ig, function (capture) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return '$__serializable';
                }); //+
                //'\n\treturn exports;\n}\ncatch(ex){\n\tconsole.log("Error:", ex, "@' + fullFilename.replace(/\\/ig, '\\\\') + '");\n}\n})';
                var _script = vm_1.createScript(code);
                dependencyLoader_1.onLoadCompleted = function (finished) {
                    var context = vm_1.createContext({
                        $__required: finished,
                        $__serializable: exports
                    });
                    var fn = _script.runInContext(context);
                    var exported = fn();
                    if (!exported)
                        console.log('Exported is undefined: ', fullFilename_1);
                    if (exported['__relativeRoot'])
                        exported['__relativeRoot'] = __relativeRoot;
                    console.log('exported: ', exported);
                    callback(exported);
                };
                dependencyLoader_1.completeRequire();
            });
        }
        catch (ex) {
            console.log('dynamicRequire Error: ', ex);
        }
    };
}
else {
    //NodeJS
    //console.log('loading Node Modules', __dirname.length);
    __relativeRoot = __dirname;
    //eval must be used here as the AMD loader can recognize require and processes it before the script is running;
    var fs_2 = eval('require("fs")');
    var vm_2 = eval('require("vm")');
    DynamicRequire = function (fileName, directoryName, callback) {
        try {
            if (!directoryName)
                directoryName = __relativeRoot;
            console.log('DynamicRequire: ', fileName, ' Base Path: ' + directoryName);
            var required = {};
            var requiredIndex_2 = 0;
            var fullFilename_2 = Path.Reduce(directoryName + '//' + fileName);
            var dependencyLoader_2 = new AsyncRequireNumberLoader(required);
            if (fs_2.existsSync(fullFilename_2)) {
                if (fs_2.statSync(fullFilename_2).isFile()) {
                    var code = '(function (){\ntry{\n\tvar exports = {};\n' +
                        fs_2.readFileSync(fullFilename_2).toString()
                            .replace(/require\s*\(\s*[\'"](\.+[\/a-z_\-\s0-9\.]+)[\'"]\s*\)/ig, function (capture) {
                            var args = [];
                            for (var _i = 1; _i < arguments.length; _i++) {
                                args[_i - 1] = arguments[_i];
                            }
                            var $file = Path.Reduce(directoryName + '//' + args[0] + '.js');
                            //required[requiredIndex] = DynamicRequire(Path.getFilename($file), Path.toPathname($file));
                            dependencyLoader_2.require(requiredIndex_2, Path.getFilename($file), Path.toPathname($file));
                            var replacement = '$__required[' + requiredIndex_2 + ']';
                            requiredIndex_2 += 1;
                            return replacement;
                        }) +
                        '\n\treturn exports;\n}\ncatch(ex){\n\tconsole.log("Error:", ex, "@' + fullFilename_2.replace(/\\/ig, '\\\\') + '");\n}\n})';
                    var _script_1 = vm_2.createScript(code);
                    dependencyLoader_2.onLoadCompleted = function (finished) {
                        var context = vm_2.createContext({
                            console: console,
                            require: require,
                            __dirname: directoryName,
                            __filename: __filename,
                            process: process,
                            $__required: finished
                        });
                        var fn = _script_1.runInContext(context);
                        var exported = fn();
                        if (!exported)
                            console.log('Exported is undefined: ', fullFilename_2);
                        if (exported['__relativeRoot'])
                            exported['__relativeRoot'] = __relativeRoot;
                        callback(exported);
                    };
                }
                else {
                    console.log('dynamicRequire Error: File not found - ' + fullFilename_2);
                }
            }
            else {
                console.log('dynamicRequire Error: File not found - ' + fullFilename_2);
            }
        }
        catch (ex) {
            console.log('dynamicRequire Error: ', ex);
        }
    };
}
/**
 * You must provide a Module Name for the this Serializable decorator. It uses the Module Name to deserialize the object.
 * @param moduleName
 */
function Serializable(moduleName) {
    return function (target) {
        // save a reference to the original constructor
        var original = target;
        // a utility function to generate instances of a class
        function construct(constructor, args) {
            var c = function () {
                return constructor.apply(this, args);
            };
            c.prototype = constructor.prototype;
            var instance = new c();
            instance['@Serializable.ModuleName'] = moduleName;
            instance['@Serializable.TypeName'] = original.name;
            return instance;
        }
        // the new constructor behaviour
        var f = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i - 0] = arguments[_i];
            }
            console.log("New: " + original.name + " : Serializable");
            return construct(original, args);
        };
        // copy prototype so intanceof operator still works
        f.prototype = original.prototype;
        // return new constructor (will override original)
        return f;
    };
}
exports.Serializable = Serializable;
// References is the dictionary that hold all loaded library;
var References = {};
var __moduleRoot;
/**
 * This path is determined by path.dirname(require.main.filename). If you want to changed the default value, set a new value to it after require/import.
 */
var ObjectDeserializer = (function () {
    function ObjectDeserializer(jsonObject, callback) {
        var _this = this;
        this.jsonObject = jsonObject;
        this.callback = callback;
        this.onObjectBuild = function (moduleName, typeName) {
            var that = _this;
            return function (exported) {
                References[moduleName] = exported;
                console.log('moduleName.typeName: ', moduleName, typeName, References[moduleName][typeName]);
                that.result = new References[moduleName][typeName]();
                that.DeserializeProperties();
                that.DeserializeIndices();
                that.start();
            };
        };
        this.DeserializeProperties = function () {
            for (var property in _this.jsonObject) {
                _this.properties.push(property);
                console.log('Deserialize property: ', property);
                //Deserialize(this.jsonObject[property], this.onPropertyDeserialized(property));
                new ObjectDeserializer(_this.jsonObject[property], _this.onPropertyDeserialized(property));
            }
        };
        this.DeserializeIndices = function () {
            if (!Array.isArray(_this.jsonObject))
                return; //guard here;
            for (var i = 0; i < _this.jsonObject.length; i++) {
                _this.indices.push(i);
                console.log('Deserialize index: ', i);
                //Deserialize((<any[]>this.jsonObject)[i], this.onIndexDeserialized(i));
                new ObjectDeserializer(_this.jsonObject[i], _this.onIndexDeserialized(i));
            }
        };
        this.onIndexDeserialized = function (index) {
            return function (deserialized) {
                console.log('index deserialized: ', index, deserialized);
                (_this.result).push(deserialized);
                _this.indices.splice(_this.indices.indexOf(index), 1);
                _this.invokeCallback();
            };
        };
        this.onPropertyDeserialized = function (property) {
            return function (deserialized) {
                console.log('prorperty deserialized: ', property, deserialized);
                _this.result[property] = deserialized;
                _this.properties.splice(_this.properties.indexOf(property), 1);
                _this.invokeCallback();
            };
        };
        this.indices = [];
        this.properties = [];
        this.started = true;
        this.start = function () {
            _this.started = true;
            console.log('Deserialization started.');
            _this.invokeCallback();
        };
        this.invokeCallback = function () {
            console.log('try invoke callback.');
            if (_this.indices.length == 0 && _this.properties.length == 0 && _this.started) {
                console.log('result: ', _this.result);
                _this.callback(_this.result);
            }
        };
        if (typeof jsonObject != 'object') {
            this.result = jsonObject;
            this.start();
            return;
        }
        if (jsonObject['@Serializable.ModuleName'] && jsonObject['@Serializable.TypeName']) {
            console.log('Deserialize Object: ', JSON.stringify(jsonObject));
            var moduleName = jsonObject['@Serializable.ModuleName'];
            var typeName = jsonObject['@Serializable.TypeName'];
            //load module to References
            if (moduleName.charAt(0) == '/') {
                // this is a relative file;
                // if the module was not loaded, load it from the module file;
                //console.log('__relativeRoot: ', __relativeRoot);
                if (!References[moduleName]) {
                    var $file = Path.Reduce(__relativeRoot + moduleName + '.js');
                    console.log('Deserialize->Load Type Def from: ', $file);
                    DynamicRequire(Path.getFilename($file), Path.toPathname($file), this.onObjectBuild(moduleName, typeName));
                }
                else {
                    console.log('Deserialize->Module has been loaded: ', moduleName);
                    this.onObjectBuild(moduleName, typeName)(References[moduleName]);
                }
            }
            else {
                //this is a built-in module
                //this.onObjectBuild(moduleName, typeName)(require(moduleName));
                if (!References[moduleName]) {
                    var $file = Path.Reduce(__relativeRoot + '/node_modules/' + moduleName + '/index.js');
                    console.log('Deserialize->Load Type Def from: ', $file);
                    DynamicRequire(Path.getFilename($file), Path.toPathname($file), this.onObjectBuild(moduleName, typeName));
                }
                else {
                    console.log('Deserialize->Module has been loaded: ', moduleName);
                    this.onObjectBuild(moduleName, typeName)(References[moduleName]);
                }
            }
            return; //stop here if it needs to built from libs;
        }
        if (!this.result && Array.isArray(jsonObject))
            this.result = [];
        //if it is a plain object, we will deserialize the properties only;
        //this won't work if there is no properties;
        this.DeserializeIndices();
        this.DeserializeProperties();
        this.start();
    }
    return ObjectDeserializer;
}());
/**
 * Deserialize object and invoke the callback when object is loaded;
 * @param jsonObject The object that needs to be deserialized.
 * @param callback The call back function that provides the deserialized object.
 */
function Deserialize(jsonObject, callback) {
    new ObjectDeserializer(jsonObject, callback);
}
exports.Deserialize = Deserialize;
/**
 * Register a member in a rpcService to work as cgi method;
 * @param target
 * @param propertyKey
 */
function rpcMember(target, // The prototype of the class
    propertyKey //,  The name of the method
    ) {
    //console.log("MethodDecorator called on: ", target, propertyKey);
    //return descriptor;
}
exports.rpcMember = rpcMember;
/**
 * Register a class as rpcService so it will be converted to .service.ts and .cgi.ts by rpc service compiler;
 * the .cgi.ts will wrap the service to process http requests;
 * @param target
 */
function rpcService(target) {
    //doing nothing here;
}
exports.rpcService = rpcService;
var Converter = (function () {
    function Converter() {
    }
    /**
     * Convert string to string;
     * @param res
     */
    Converter.convertStringResponse = function (res) {
        return res.text();
    };
    /**
     * Convert response to json;
     * @param res
     */
    Converter.convertJsonResponse = function (res) {
        return res.json();
    };
    /**
     * Convert response from text to number value;
     * @param res
     */
    Converter.convertNumberResponse = function (res) {
        return Number(res.text());
    };
    /**
     * Convert response from text to boolean value;
     * @param res
     */
    Converter.convertBooleanResponse = function (res) {
        return Boolean(res.text());
    };
    return Converter;
}());
exports.Converter = Converter;
/**
 * A class that can help run code in a async mode.
 */
var async = (function () {
    function async() {
        this.statements = [];
        this.canRun = true;
    }
    async.prototype.run = function (statement) {
        var _this = this;
        this.statements.push(function () {
            statement();
            _this.next();
        });
        if (this.canRun)
            this.next();
    };
    async.prototype.await = function (statement, setter) {
        var _this = this;
        this.statements.push(function () {
            statement(function (value) {
                setter(value);
                _this.next();
            });
        });
        if (this.canRun)
            this.next();
    };
    async.prototype.next = function () {
        if (this.statements.length > 0) {
            var ia = this.statements.shift();
            this.canRun = false;
            ia();
        }
        else {
            this.canRun = true;
        }
    };
    return async;
}());
exports.async = async;
var TaskInfo = (function () {
    function TaskInfo() {
    }
    TaskInfo = __decorate([
        Serializable('Serializable'), 
        __metadata('design:paramtypes', [])
    ], TaskInfo);
    return TaskInfo;
}());
exports.TaskInfo = TaskInfo;
//for NodeJS
if (module) {
    module.exports = exports;
}
//# sourceMappingURL=index.js.map